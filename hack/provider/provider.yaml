name: ecs
version: ##VERSION##
description: |-
  DevPod on ECS
icon: https://devpod.sh/assets/aws.svg
iconDark: https://devpod.sh/assets/aws_dark.svg
options:
  CLUSTER_ID:
    description: ECS Cluster ID either as ARN or ID
    required: true
  SUBNET_ID:
    description: ECS Subnet ID either as ARN or ID
    required: true
  TASK_ROLE_ARN:
    description: ECS Task Role ARN to use for the task definition with IAM permissions required for ECS Exec. For more information take a look at https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html
    required: true
  EXECUTION_ROLE_ARN:
    description: ECS Execution Role ARN to use for the task definition. For more information take a look at https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html
    required: true
  CLUSTER_ARCHITECTURE:
    description: The cpu architecture of the cluster. Can be either amd64 or arm64. Defaults to arm64
    default: "amd64"
    enum:
      - "amd64"
      - "arm64"
  TASK_CPU:
    description: ECS Task cpu as a string. If using Fargate, make sure the combination with TASK_MEMORY is supported. E.g. '.5 vcpu'. Learn more at https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_size
    required: true
    default: "2 vcpu"
  TASK_MEMORY:
    description: ECS Task memory as a string. If using Fargate, make sure the combination with TASK_CPU is supported. E.g. '1 gb'. Learn more at https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_size
    required: true
    default: "4 gb"
  LAUNCH_TYPE:
    description: ECS Task Launch Type, which can be either FARGATE, ECS or EXTERNAL
    default: "FARGATE"
    required: true
    enum:
      - "FARGATE"
      - "EC2"
      - "EXTERNAL"
  ASSIGN_PUBLIC_IP:
    description: If the task should get a public ip assigned. For public subnets specify ENABLED and for private subnets specify DISABLED.
    default: "ENABLED"
    required: true
    enum:
      - "ENABLED"
      - "DISABLED"
  SECURITY_GROUP_ID:
    description: ECS Security Group ID to attach to the network settings of the ECS task.
agent:
  containerInactivityTimeout: ${INACTIVITY_TIMEOUT}
  local: true
  binaries:
    ECS_PROVIDER:
      - os: linux
        arch: amd64
        path: https://github.com/loft-sh/devpod-provider-ecs/releases/download/##VERSION##/devpod-provider-ecs-linux-amd64
        checksum: ##CHECKSUM_LINUX_AMD64##
      - os: linux
        arch: arm64
        path: https://github.com/loft-sh/devpod-provider-ecs/releases/download/##VERSION##/devpod-provider-ecs-linux-arm64
        checksum: ##CHECKSUM_LINUX_ARM64##
      - os: darwin
        arch: amd64
        path: https://github.com/loft-sh/devpod-provider-ecs/releases/download/##VERSION##/devpod-provider-ecs-darwin-amd64
        checksum: ##CHECKSUM_DARWIN_AMD64##
      - os: darwin
        arch: arm64
        path: https://github.com/loft-sh/devpod-provider-ecs/releases/download/##VERSION##/devpod-provider-ecs-darwin-arm64
        checksum: ##CHECKSUM_DARWIN_ARM64##
      - os: windows
        arch: amd64
        path: https://github.com/loft-sh/devpod-provider-ecs/releases/download/##VERSION##/devpod-provider-ecs-windows-amd64.exe
        checksum: ##CHECKSUM_WINDOWS_AMD64##
  dockerlessIgnorePaths: '/managed-agents'
  driver: custom
  custom:
    findDevContainer: ${ECS_PROVIDER} find
    commandDevContainer: ${ECS_PROVIDER} command
    startDevContainer: ${ECS_PROVIDER} start
    stopDevContainer: ${ECS_PROVIDER} stop
    runDevContainer: ${ECS_PROVIDER} run
    deleteDevContainer: ${ECS_PROVIDER} delete
    targetArchitecture: ${ECS_PROVIDER} target-architecture
exec:
  command: |-
    "${DEVPOD}" helper sh -c "${COMMAND}"
